const math = require("mathjs");

/**
 * @param data A two-dimensional array in the form of [[x1, y1], [x2, y2], ..., [xn, yn]]
 */
exports.model = function(data) {
  var A = 0;
  var B = 0;
  var C = 0;

  const X = [];
  const Y = [];
  const Y_reciprocal = [];
  for (var i = 0; i < data.length; i++) {
    X.push(data[i][0]);
    Y.push(data[i][1]);
    Y_reciprocal.push(1 / data[i][1]);
  }
  const x = X;
  const y = Y_reciprocal;

  const s = [0];
  for (var i = 1; i < data.length; i++) {
    s.push(s[i - 1] + 0.5 * (y[i] + y[i - 1]) * (x[i] - x[i - 1]));
  }

  var H0 = 0;
  var H1 = 0;
  var I0 = 0;
  var I1 = 0;
  var J0 = 0;
  var J1 = 0;
  for (var i = 0; i < data.length; i++) {
    H0 = H0 + Math.pow(x[i] - x[0], 2);
    H1 = H1 + (x[i] - x[0]) * s[i];
    I0 = I0 + (x[i] - x[0]) * s[i];
    I1 = I1 + Math.pow(s[i], 2);
    J0 = J0 + (y[i] - y[0]) * (x[i] - x[0]);
    J1 = J1 + (y[i] - y[0]) * s[i];
  }

  const HI = math.matrix([
    [H0, I0],
    [H1, I1]
  ]);
  const J = math.matrix([[J0], [J1]]);

  const c = math.multiply(math.inv(HI), J)._data[1];
  B = -1 * c;

  var L0 = data.length;
  var L1 = 0;
  var M0 = 0;
  var M1 = 0;
  var N0 = 0;
  var N1 = 0;
  for (var i = 0; i < data.length; i++) {
    L1 = L1 + Math.pow(Math.E, c * x[i]);
    M0 = L1;
    M1 = M1 + Math.pow(Math.E, 2 * c * x[i]);
    N0 = N0 + y[i];
    N1 = N1 + y[i] * Math.pow(Math.E, c * x[i]);
  }

  const LM = math.matrix([
    [L0, M0],
    [L1, M1]
  ]);
  const N = math.matrix([[N0], [N1]]);

  const ab = math.multiply(math.inv(LM), N)._data;
  const a = ab[0];
  const b = ab[1];

  A = b / a;
  C = 1 / a;

  return { A, B, C };
};

exports.predict = function(data, X) {
  const model = exports.model(data);
  const value = model.C / (1 + model.A * Math.pow(Math.E, -1 * model.B * X));

  return value;
};
